(* Define the gcd function using recursion *)
let rec gcd a b =
  match b with
  | 0 -> a
  | _ -> gcd b (a mod b)

(* Test cases for gcd function *)
let () =
  let test_cases = [
    (12, 18); (* gcd(12, 18) = 6 *)
    (60, 48); (* gcd(60, 48) = 12 *)
    (101, 103); (* gcd(101, 103) = 1, prime numbers *)
    (0, 5); (* gcd(0, 5) = 5 *)
    (5, 0); (* gcd(5, 0) = 5 *)
    (35, 10); (* gcd(35, 10) = 5 *)
  ] in

  (* Loop through test cases and print results *)
  List.iter (fun (a, b) ->
    Printf.printf "gcd(%d, %d) = %d\n" a b (gcd a b)
  ) test_cases
